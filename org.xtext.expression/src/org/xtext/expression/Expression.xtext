grammar org.xtext.expression.Expression with org.eclipse.xtext.common.Terminals

generate expression "http://www.xtext.org/expression/Expression"

//TODO: Add power ** with right-associativity and highest precedence
//TODO: Add floating point support for numbers!!!!

MathExpression:
	definitions += Definition*
	'result' 'is' expression=Expression
;

// A definition is basically just a variable with a bit extra syntax
Definition returns Variable:
	'def' Variable 'with'
;

Variable:
	name=ID '=' expression=Expression
;

// This rule is simply here to make the grammar easier to read and understand
Expression:
	AddSub
;

// AddSub and MultDiv are only used as rules to ensure precedence, but they are
// both represented as the common Binary type in the meta model
AddSub returns Expression:
	MultDiv ({Binary.left=current} operator=AddSubOp right=MultDiv)*
;

MultDiv returns Expression:
	Functional ({Binary.left=current} operator=MultDivOp right=Functional)*
;

// By explicitly instantiating the Functional type, we ensure that 'variable'
// and 'expression' are not placed in the Expression type of the meta model
Functional returns Expression:
	{Functional} 'let' variable=Variable 'in' expression=Expression 'end' | Primary
;

// We only use these two rules to group operators, but they are not actually
// part of our meta model. The common Operator type is used in the Binary type
AddSubOp returns Operator:
	{Plus} '+' | {Minus} '-'
;

MultDivOp returns Operator:
	{Mult} '*' | {Div} '/'
;

Primary returns Expression:
	Parenthesis | Reference | Number
;

// This type is necessary because otherwise we do not know where to print
// parentheses when displaying expressions. If all we needed was to compute the
// value, I would add 'returns Expression' here
Parenthesis:
	'(' expression=Expression ')'
;

Reference:
	name=[Variable]
;

Number:
	value=INT
;
