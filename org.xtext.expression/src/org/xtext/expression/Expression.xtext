grammar org.xtext.expression.Expression with org.eclipse.xtext.common.Terminals

generate expression "http://www.xtext.org/expression/Expression"

MathExpression:
	(definitions += Definition | calculations += Calculation)*
;

Calculation:
	'result' name=STRING 'is' expression=Expression
;

// A definition is basically just a variable with a bit extra syntax
Definition returns Variable:
	'def' Variable 'with'
;

Variable:
	name=ID '=' expression=Expression
;

// This rule is simply here to make the grammar easier to read and understand
Expression:
	AddSub
;

// AddSub and MultDiv are only used as rules to ensure precedence, but they are
// both represented as the common Binary type in the meta model
AddSub returns Expression:
	MultDiv ({Add.left=current} '+' right=MultDiv | {Sub.left=current} '-' right=MultDiv)*
;

MultDiv returns Expression:
	Functional ({Mult.left=current} '*' right=Functional | {Div.left=current} '/' right=Functional)*
;

// By explicitly instantiating the Functional type, we ensure that 'variable'
// and 'expression' are not placed in the Expression type of the meta model
Functional returns Expression:
	{Functional} 'let' variable=Variable 'in' expression=Expression 'end' | Primary
;

Primary returns Expression:
	Parenthesis | Reference | Number
;

// This type is necessary because otherwise we do not know where to print
// parentheses when displaying expressions. If all we needed was to compute the
// value, I would add 'returns Expression' here
Parenthesis:
	'(' expression=Expression ')'
;

Reference:
	variable=[Variable]
;

Number:
	value=INT
;
