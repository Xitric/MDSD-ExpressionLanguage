grammar org.xtext.expression.Expression with org.eclipse.xtext.common.Terminals

generate expression "http://www.xtext.org/expression/Expression"

//TODO: Add power ** with right-associativity and highest precedence

MathExpression:
	definitions += Definition*
	'result' 'is' expression=Expression
;

Definition:
	'def' variable=Variable 'with'
;

Variable:
	name=ID '=' expression=Expression
;

Expression:
	AddSub
;

// We do not actually want the AddSub and MultDiv types generated, but simply
// use them as grammar rules
AddSub returns Expression:
	MultDiv ({Expression.left=current} operator=AddSubOp right=MultDiv)*
;

MultDiv returns Expression:
	Functional ({Expression.left=current} operator=MultDivOp right=Functional)*
;

Functional returns Expression:
	'let' variable=Variable 'in' expression=Expression 'end' | Primary
;

// We define a common super type for operators to make the generated meta model
// clearer. Otherwise the common operator just becomes an EObject. Also, there
// is no need to generate classes for AddSubOp and MultDivOp, because we only
// use then as grammar rules
Operator:
	AddSubOp | MultDivOp
;

AddSubOp returns Operator:
	{Plus} '+' | {Minus} '-'
;

MultDivOp returns Operator:
	{Mult} '*' | {Div} '/'
;

// Type Primary is never generated but makes Number and Parenthesis as sub
// types of Expression
Primary returns Expression:
	Parenthesis | Reference | Number
;

Parenthesis:
	'(' expression=Expression ')'
;

Reference:
	name=[Variable]
;

Number:
	value=INT
;
