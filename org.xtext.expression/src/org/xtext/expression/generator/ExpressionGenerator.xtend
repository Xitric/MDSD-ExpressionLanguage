/*
 * generated by Xtext 2.20.0
 */
package org.xtext.expression.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.expression.expression.Div
import org.xtext.expression.expression.Expression
import org.xtext.expression.expression.MathExpression
import org.xtext.expression.expression.Minus
import org.xtext.expression.expression.Mult
import org.xtext.expression.expression.Number
import org.xtext.expression.expression.Parenthesis
import org.xtext.expression.expression.Plus

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ExpressionGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val math = resource.allContents.filter(MathExpression).next
		System.out.println('''«math.display»=«math.compute»''')
	}
	
	//
	// Compute
	//
	def int compute(MathExpression math) {
		math.expression.computeExp
	}
	
	def dispatch int computeExp(Expression exp) {
		val left = exp.left.computeExp
		switch exp.operator {
			Plus: left + exp.right.computeExp
			Minus: left - exp.right.computeExp
			Mult: left * exp.right.computeExp
			Div: left / exp.right.computeExp
			default: left
		}
	}
	
	def dispatch int computeExp(Parenthesis paren) {
		paren.expression.computeExp
	}
	
	def dispatch int computeExp(Number num) {
		num.value
	}
	
	//
	// Display
	//
	def CharSequence display(MathExpression math) '''Math[«math.expression.displayExp»]'''
	
	def dispatch CharSequence displayExp(Expression exp) '''Exp[«exp.left.displayExp»,«exp.operator?.displayOp»,«exp.right?.displayExp»]'''
	def dispatch CharSequence displayExp(Parenthesis paren) '''(«paren.expression.displayExp»)'''
	def dispatch CharSequence displayExp(Number num) '''«num.value»'''
	
	def dispatch CharSequence displayOp(Plus op) '''+'''
	def dispatch CharSequence displayOp(Minus op) '''-'''
	def dispatch CharSequence displayOp(Mult op) '''*'''
	def dispatch CharSequence displayOp(Div op) '''/'''
}
